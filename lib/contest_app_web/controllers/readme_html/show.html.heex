<div class="flex justify-around w-100 h-100">
  <div class="bg-black bg-opacity-50 md:w-2/3 custom-border p-2">
    <h1 class="text-xl text-customLightBlue">Glad you made it here.</h1>

    <div class="text-md text-customLightBlue mb-4 mt-2">
      As you probably know, readme’s and documentation are a developer’s best friend.
    </div>

    <h2 class="text-lg text-customLightBlue mt-4">🚀 What You’re Building</h2>
    <p class="text-md text-customLightBlue mb-2">
      Your task is to build a <strong>local Web API</strong>
      that responds to a series of automated challenges issued by ground control (this app).
    </p>
    <p class="text-md text-customLightBlue mb-2">
      The API should expose endpoints like <code>/ok</code>, <code>/transmissions</code>, and more as the mission unfolds. The contest app will interact with your API using plain HTTP over the local network.
    </p>

    <h2 class="text-lg text-customLightBlue mt-4">📚 Suggested Tutorials by Stack</h2>
    <p class="text-md text-customLightBlue mb-2">
      Use whichever stack you're comfortable with. Need a refresher? Here are some guides on web apis:
    </p>

    <ul class="list-disc pl-5 mb-4 text-customLightBlue text-md">
      <li class="mt-2">
        <strong>.NET (C# Minimal API)</strong>
        –
        <.link
          href="https://learn.microsoft.com/en-us/aspnet/core/tutorials/min-web-api?view=aspnetcore-9.0&tabs=visual-studio"
          class="text-customLightBlue underline hover:no-underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          Microsoft Minimal API Tutorial
        </.link>
      </li>
      <li class="mt-2">
        <strong>Go (Gin Web Framework)</strong>
        –
        <.link
          href="https://go.dev/doc/tutorial/web-service-gin"
          class="text-customLightBlue underline hover:no-underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          Build a REST API with Gin
        </.link>
      </li>
      <li class="mt-2">
        <strong>Rust (Axum Framework)</strong>
        –
        <.link
          href="https://github.com/tokio-rs/axum/blob/main/examples/hello-world/src/main.rs"
          class="text-customLightBlue underline hover:no-underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          Hello World Example (Axum)
        </.link>
        or check
        <.link
          href="https://docs.rs/axum/latest/axum/"
          class="text-customLightBlue underline hover:no-underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          Axum Docs
        </.link>
      </li>
      <li class="mt-2">
        <strong>Elixir (Phoenix Framework)</strong>
        –
        <.link
          href="https://blog.logrocket.com/build-rest-api-elixir-phoenix/"
          class="text-customLightBlue underline hover:no-underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          Building a REST API with Elixir and Phoenix
        </.link>
      </li>
      <li class="mt-2">
        <strong>JavaScript (Express.js)</strong>
        –
        <.link
          href="https://expressjs.com/en/starter/hello-world.html"
          class="text-customLightBlue hover:underline"
          target="_blank"
          rel="noopener noreferrer"
        >
          Express.js Hello World Guide
        </.link>
      </li>
    </ul>

    <h2 class="text-lg text-customLightBlue">🛠 Setup Instructions</h2>

    <h3 class="text-md text-customLightBlue mt-4 font-bold">1. Build and Run Your API</h3>
    <p class="text-md text-customLightBlue mb-4">
      Your Web API should respond to specific endpoints. When your app is running, the contest server will call these endpoints and track your progress.
    </p>

    <h3 class="text-md text-customLightBlue mt-4 font-bold">
      2. Configure the Local Network Access
    </h3>
    <p class="text-md text-customLightBlue mb-4">
      To allow the contest system to access your app, bind it to <code>http://0.0.0.0:5029</code>. This exposes your server to other devices on your local network.
      Curious why <code>0.0.0.0</code>
      matters?
      <.link
        href="https://stackoverflow.com/questions/20778771/what-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost"
        class="text-customLightBlue underline hover:no-underline"
        target="_blank"
        rel="noopener noreferrer"
      >
        Read this explanation.
      </.link>
    </p>

    <h3 class="text-md text-customLightBlue mt-4 font-bold">3. Check Firewall Settings</h3>
    <p class="text-md text-customLightBlue mb-4">
      Ensure your firewall allows incoming traffic on port <code>5029</code>. If it's blocked, the system won't be able to test your endpoints.
    </p>

    <h2 class="text-lg text-customLightBlue mt-6">🧠 Mission Briefing & Tips</h2>

    <ul class="list-disc pl-5 mb-4 text-md text-customLightBlue">
      <li class="mt-2">
        <strong>The Rules</strong>
        – Win by reaching the final stage first, or by having the highest completed challenge when the timer expires. In case of ties, fastest timestamp wins.
      </li>
      <li class="mt-2">
        <strong>The Testing Process</strong>
        – The system continuously pings your endpoints. If your app resets or crashes, you’ll return to test one — but don’t worry, your leaderboard score is persistent.
      </li>
      <li class="mt-2">
        <strong>Command Central</strong>
        – Your main screen during the contest. It shows your current test, results, and status.
      </li>
      <li class="mt-2">
        <strong>Leaderboard</strong>
        – See how you're performing compared to other participants in real time.
      </li>
      <li class="mt-2">
        <strong>Transmissions</strong>
        – A recurring data object in the test scenarios. It includes <code>id</code>
        (int), <code>signal_code</code>
        (string), and <code>message</code>
        (string). Treat it like an object, DTO, class, struct, record, or map — whatever floats your boat (or ship, in this case).
      </li>
      <li class="mt-2">
        <strong>The Setup Process</strong>
        – Make sure your app is bound to an address that other devices on your local network can reach. Avoid using <code>localhost</code>, as it only binds to your own machine. Instead, use something like <code>0.0.0.0</code>, <code>127.0.0.1</code>, or your machine’s local IP. Check your framework’s documentation on how to configure host and port binding.
      </li>

      <li class="mt-2">
        <strong>Use Dev Tools</strong>
        – Your IDE, network monitor, and console logs will help you debug and observe traffic.
      </li>
    </ul>

    <h2 class="text-lg text-customLightBlue mt-6">🛡️ Having Trouble?</h2>
    <ul class="list-disc pl-5 mb-4 text-customLightBlue text-md">
      <li>Is your app bound to <code>http://0.0.0.0</code>? Not <code>localhost</code>?</li>
      <li>Is your firewall blocking port <code>5029</code>? Open it up.</li>
      <li>Is your API running?</li>
      <li>
        Still stuck? Don’t be shy — ask a fellow participant or reach out to a contest organizer.
      </li>
    </ul>
  </div>
</div>
